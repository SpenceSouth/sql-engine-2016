grammar DataModeling;

start :  expression ';' ;
expression :  onerelationexpression ';' | tworelationexpression ';' | databaseexpression ';' |  selectexpression ';' ;
databaseexpression :  'SAVE' | 'COMMIT' | 'LOAD' 'DATABASE' name | 'CREATE' createclause | 'DROP' databaseortable name ;
createclause :  'DATABASE' name | 'TABLE' name createtableclause ;
createtableclause :  '(' createtablecolumns ')' ;
createtablecolumns :  name fieldtype nullclause createtableaddition ;
createtableaddition :  ',' createtablecolumns | /* empty */ ;
fieldtype :  'INTEGER' widthinteger | 'NUMBER' widthdecimal | 'CHARACTER' width | 'DATE' dateclause ;
width :  '(' number ')' ;
widthinteger :  '(' number ')' | /* empty */ ;
widthdecimal :  '(' number decimaloption ')' | /* empty */ ;
decimaloption :   ',' number | /* empty */ ;
dateclause :  '(' number '/' number '/' number ')' ;
nullclause :  'NOT' 'NULL' | '/* empty */' ;
databaseortable :  'DATABASE' | 'TABLE' ;
name :  IDNAME ;
onerelationexpression :  term oldnonterminals | deletion | insertion | updating | wselecting ;
oldnonterminals :  renaming | restriction | projection ;
wselecting :  'WSELECT' wselectoptional 'FROM' name whereclause ;
wselectoptional :  fieldparenthesis | '*' | '/* empty */' ;
selectexpression :  'SELECT' selectclause ;
selectclause :  selectionone selectiontwo joinaggregategrouping | field 'SUM' '(' attribute ')' 'AS' name 'FROM' name 'GROUP' 'BY' setsrollupcube ;
joinaggregategrouping :  'FROM' derivedtable whereclause | selectionthree 'FROM' derivedtable aggregategrouping ;
setsrollupcube :  'GROUPING' 'SETS' '(' parenthesisfieldgroup ')' | 'ROLLUP' '(' field ')' | 'CUBE' '(' field ')' ;
aggregategrouping :  whereclause | groupbyclause havingclause ;
derivedtable :  table | selectexpression ;
parenthesisfieldgroup :  '(' field ')' parenthesisfieldmultiple ;
parenthesisfieldmultiple :  ',' parenthesisfieldgroup | /* empty */ ;
groupbyclause :  'GROUP' 'BY' field | /* empty */ ;
havingclause :  'HAVING' comparison | /* empty */ ;
selectionone :  'ALL' allclause | 'DISTINCT' distinctclause | /* empty */ ;
allclause :  'DISTINCT' | /* empty */ ;
distinctclause :  'ALL' | /* empty */ ;
selectiontwo :  field | '*' ;
selectionthree :  aggregate '(' aggregatefield ')' selectionthreeclause ;
selectionthreeclause :  ',' selectionthree | /* empty */ ;
aggregate :  'COUNT' | 'AVG' | 'SUM' | 'MIN' | 'MAX' ;
aggregatefield :  name | '*' | /* empty */ ;
table :  tableclause | /* empty */ ;
tableclause :  name tableaddition ;
tableaddition :  ',' tableclause | /* empty */ ;
updating :  'UPDATE' name 'SET' updateclause whereclause | 'WUPDATE' name 'SET' wupdateclause whereclause ;
updateclause :  name '=' name updateaddition ;
updateaddition :  ',' updateclause | /* empty */ ;
wupdateclause :  optionaldate name '=' name wupdateexpressionaddition ;
wupdateexpressionaddition :  ',' wupdateclause | /* empty */ ;
optionaldate :  'DATE' dateclause ':' 'TIME' | /* empty */ ;
whereclause :  'WHERE' comparison | /* empty */ ;
insertion :  'INSERT' 'INTO' relation fieldparenthesis 'VALUES' '(' literal ')' ;
fieldparenthesis :  '(' field ')' | /* empty */ ;
field :  attribute multiplefieldschoice ;
multiplefieldschoice :  ',' multiplefields | /* empty */ ;
multiplefields :  attribute multiplefieldschoice ;
literal :  name literalclause ;
literalclause :  ',' literal | /* empty */ ;
deletion :  'DELETE' 'FROM' deleteaddition ;
deleteaddition :  restriction | attribute ;
renaming :  'RENAME' attribute 'AS' attribute ;
term :  relation | '(' expression ')' ;
restriction :  'WHERE' comparison ;
projection :  '(' attributecommalist ')' | /* empty */ ;
attributecommalist :  attribute attributecommalistaddition ;
attributecommalistaddition :  ',' attributecommalist | /* empty */ ;
tworelationexpression :  projection binaryoperation expression ;
binaryoperation :  '+' | '-' | '*' | '/' ;
comparison :  attribute compare number ;
compare :  '<' | '>' | '<=' | '>=' | '=' | '<>' ;
number :  val numberclause ;
numberclause :  number | /* empty */ ;
val :  '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;
attribute :  name ;
relation :  name ;
IDNAME : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;